# -*- coding: utf-8 -*-

def get_class_parameter_suggestions(trial) -> dict:
    """
    Get parameter sample for Class (like Keras)
    Args:
        trial(trial.Trial):
    Returns:
        dict: parameter sample generated by trial object
    """
    return {
        'gpus': '0',
        'img_rows': 331,
        'img_cols': 331,
        'channels': 3,
        'batch_size': 16,
        'classes': ['negative', 'positive'],
        'train_data_dir': './input/CV1_small/train',
        'validation_data_dir': './input/CV1_small/validation',
        'class_mode': 'categorical', # generatorのラベルをone-hotベクトルに変換する場合。generatorのラベルを0か1のどちらかに変えるだけなら'binary'
        'output_dir': 'output/multitask_categorical_crossentropy_test',
        'activation': 'softmax',
        'metrics': ['accuracy'],
        'model_path': None,
        'num_epoch': 50,

        'choice_model': trial.suggest_categorical('choice_model', ['InceptionV3', 'EfficientNet']),
        'is_skip_bn': trial.suggest_categorical('is_skip_bn', [True, False]),
        'trainable': trial.suggest_categorical('trainable', ['all', 100, 200, 300, 400, 500, 600]),

        'fcs': trial.suggest_categorical('fcs', [[], [100], [256], [512, 256], [1024, 512, 256]]),
        'drop': trial.suggest_categorical('drop', [0.3, 0.5, 0.7]),
        'is_add_batchnorm': trial.suggest_categorical('is_add_batchnorm', [True, False]),
        'l2_rate': trial.suggest_categorical('l2_rate', [1e-5, 5e-5, 1e-4, 5e-4, 1e-3]),

        'choice_optim': trial.suggest_categorical('choice_optim', ['sgd', 'adadelta', 'adam', 'adamax', 'nadam', 'adabound']),
        'lr': trial.suggest_categorical('lr', [1e-3, 1e-2, 1e-1]),
        'decay': trial.suggest_categorical('decay', [1e-5, 5e-5, 1e-4, 5e-4, 1e-3])
    }

def get_ImageDataGenerator_parameter_suggestions(trial) -> dict:
    """
    Get parameter sample for ImageDataGenerator (like Keras)
    Args:
        trial(trial.Trial):
    Returns:
        dict: parameter sample generated by trial object
    """
    return {
        'rescale': 1.0/255.0,
        'width_shift_range': trial.suggest_categorical('height_shift_range', [0.0, 0.25, 0.5]),
        'height_shift_range': trial.suggest_categorical('height_shift_range', [0.0, 0.25, 0.5]),
        'horizontal_flip': trial.suggest_categorical('horizontal_flip', [True, False]),
        'vertical_flip': trial.suggest_categorical('vertical_flip', [True, False]),
        'shear_range': trial.suggest_categorical('shear_range', [0.0, 20, 50]),
        'zoom_range': trial.suggest_categorical('zoom_range', [0.0, 0.2, 0.5]),
        'rotation_range': trial.suggest_categorical('rotation_range', [0.0, 45, 60, 90]),
        'channel_shift_range': trial.suggest_categorical('channel_shift_range', [0.0, 100, 200]),
        'brightness_range': trial.suggest_categorical('brightness_range', [[1.0, 1.0], [0.3, 1.0]]),
        'random_erasing_prob': trial.suggest_categorical('random_erasing_prob', [0.0, 0.5]),
        'random_erasing_maxpixel': 1.0,
        'mix_up_alpha': trial.suggest_categorical('mix_up_alpha', [0.0, 0.2]),
    }

def get_Augmentor_parameter_suggestions(trial) -> dict:
    """
    Get parameter sample for ImageDataGenerator (like Keras)
    Args:
        trial(trial.Trial):
    Returns:
        dict: parameter sample generated by trial object
    """
    return {
        'rescale': 1.0/255.0,
        'rotate90': trial.suggest_categorical('rotate90', [0.0, 0.5]),
        'rotate180': trial.suggest_categorical('rotate180', [0.0, 0.5]),
        'rotate270': trial.suggest_categorical('rotate270', [0.0, 0.5]),
        'rotate_prob': trial.suggest_categorical('rotate_prob', [0.0, 0.5]),
        'rotate_max_left': trial.suggest_categorical('rotate_max_left', [0.0, 45, 60, 90]),
        'rotate_max_right': trial.suggest_categorical('rotate_max_right', [0.0, 45, 60, 90]),
        'crop_prob': trial.suggest_categorical('crop_prob', [0.0, 0.5]),
        'crop_area': trial.suggest_categorical('crop_area', [1.0, 0.8]),


        'vertical_flip': trial.suggest_categorical('vertical_flip', [True, False]),
        'shear_range': trial.suggest_categorical('shear_range', [0.0, 20, 50]),
        'zoom_range': trial.suggest_categorical('zoom_range', [0.0, 0.2, 0.5]),
        'rotation_range': trial.suggest_categorical('rotation_range', [0.0, 45, 60, 90]),
        'channel_shift_range': trial.suggest_categorical('channel_shift_range', [0.0, 100, 200]),
        'brightness_range': trial.suggest_categorical('brightness_range', [[1.0, 1.0], [0.3, 1.0]]),
        'random_erasing_prob': trial.suggest_categorical('random_erasing_prob', [0.0, 0.5]),
        'random_erasing_maxpixel': 1.0,
        'mix_up_alpha': trial.suggest_categorical('mix_up_alpha', [0.0, 0.2]),
    }

rotate90=0.0, rotate180=0.0, rotate270=0.0, rotate_prob=0.0, rotate_max_left=20, rotate_max_right=20
                  , crop_prob=0.0, crop_area=0.8
                  , crop_by_size_prob=0.0, crop_by_width=280, crop_by_height=280, crop_by_centre=False
                  , shear_prob=0.0, shear_magni=15
                  , skew_prob=0.0, skew_magni=0.2
                  , zoom_prob=0.0, zoom_min=0.5, zoom_max=1.9 # 縮小すると開いた領域が黒塗りされる。嫌ならzoom_min=1.0として縮小やめとく
                  , flip_left_right=0.0
                  , flip_top_bottom=0.0
                  , random_erasing_prob=0.0, random_erasing_area=0.3
                  , random_dist_prob=0.0, random_dist_grid_width=4, random_dist_grid_height=4, random_dist_magnitude=8#https://github.com/mdbloice/p
                  , black_and_white=0.0
                  , greyscale=0.0
                  , invert=0.0

# 目的関数
def objective(trial):
    params = get_boosting_parameter_suggestions(trial)
    # 分類
    classifier = lgb.LGBMClassifier(**params, random_state=42)
    classifier.fit(X_train, y_train
                   , eval_set=[(X_test, y_test)], early_stopping_rounds=100, verbose=0)
    return np.linalg.norm(y_train - classifier.predict_proba(X_train)[:, 1], ord=1) # 尤度の最適化
study = optuna.create_study(direction='minimize') # 最小化
study.optimize(objective, n_trials=100)

def train():


if __name__ == '__main__':
    print('optuna_util.py: loaded as script file')
else:
    print('optuna_util.py: loaded as module file')
