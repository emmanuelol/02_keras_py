# -*- coding: utf-8 -*-

import os, time
import optuna

def get_class_fine_tuning_parameter_base() -> dict:
    """
    Get parameter sample for class fine_tuning (like Keras)
    Returns:
        dict: parameter sample generated by trial object
    """
    return {
        'output_dir': r'D:\work\kaggle_data\Cats_VS._Dogs\results\InceptionResNetV2+attention_epoch10_from_02_keras_py',
        'gpu_count': 1,
        'img_rows': 100,
        'img_cols': 100,
        'channels': 3,
        'batch_size': 50,
        'classes': ['Cat', 'Dog'],
        'num_classes': 2,
        'train_data_dir': r'D:\work\kaggle_data\Cats_VS._Dogs\images\small_set\train',
        'validation_data_dir': r'D:\work\kaggle_data\Cats_VS._Dogs\images\small_set\validation',
        'color_mode': 'rgb',
        'class_mode': 'categorical', # generatorのラベルをone-hotベクトルに変換する場合。generatorのラベルを0か1のどちらかに変えるだけなら'binary'
        'activation': 'softmax',
        'loss': 'categorical_crossentropy',
        'metrics': ['accuracy'],
        'model_path': None,
        'num_epoch': 2,
        'n_multitask': 1, # マルチタスクのタスク数
        #'multitask_pred_n_node'=2 # マルチタスクの各クラス数
        # model param
        'choice_model': 'VGG16',
        'fcpool': 'GlobalAveragePooling2D',
        'is_skip_bn': True,
        'trainable': 15,
        # full layer param
        'fcs': [],
        'drop': 0.5,
        'is_add_batchnorm': True,
        'l2_rate': 1e-4,
        # optimizer param
        'choice_optim': 'sgd',
        'lr': 1e-1,
        'decay': 0.0
    }

def get_class_fine_tuning_parameter_suggestions(trial) -> dict:
    """
    Get parameter sample for class fine_tuning (like Keras)
    Args:
        trial(trial.Trial):
    Returns:
        dict: parameter sample generated by trial object
    """
    return {
        'output_dir': r'D:\work\02_keras_py\experiment\01_code_test\output_test\tmp',
        'gpu_count': 1,
        'img_rows': 331,
        'img_cols': 331,
        'channels': 3,
        'batch_size': 16,
        'classes': ['negative', 'positive'],
        'num_classes': 2,
        'train_data_dir': './input/CV1_small/train',
        'validation_data_dir': './input/CV1_small/validation',
        'color_mode': 'rgb',
        'class_mode': 'categorical', # generatorのラベルをone-hotベクトルに変換する場合。generatorのラベルを0か1のどちらかに変えるだけなら'binary'
        'activation': 'softmax',
        'loss': 'categorical_crossentropy',
        'metrics': ['accuracy'],
        'model_path': None,
        'num_epoch': 50,
        'n_multitask': 1, # マルチタスクのタスク数
        #'multitask_pred_n_node'=2 # マルチタスクの各クラス数
        # model param
        'choice_model': trial.suggest_categorical('choice_model', ['InceptionV3', 'EfficientNet']),
        'fcpool': trial.suggest_categorical('fcpool', ['attention', 'GlobalAveragePooling2D']),
        'is_skip_bn': trial.suggest_categorical('is_skip_bn', [True, False]),
        'trainable': trial.suggest_categorical('trainable', ['all', 100, 200, 300, 400, 500, 600]),
        'efficientnet_num': trial.suggest_categorical('efficientnet_num', [3,4,5,6,7]),
        # full layer param
        'fcs': trial.suggest_categorical('fcs', [[], [100], [256], [512, 256], [1024, 512, 256]]),
        'drop': trial.suggest_categorical('drop', [0.3, 0.5, 0.7]),
        'is_add_batchnorm': trial.suggest_categorical('is_add_batchnorm', [True, False]),
        'l2_rate': trial.suggest_categorical('l2_rate', [1e-5, 5e-5, 1e-4, 5e-4, 1e-3]),
        # optimizer param
        'choice_optim': trial.suggest_categorical('choice_optim', ['sgd', 'adadelta', 'adam', 'adamax', 'nadam', 'adabound']),
        'lr': trial.suggest_categorical('lr', [1e-3, 1e-2, 1e-1]),
        'decay': trial.suggest_categorical('decay', [0.0, 1e-6, 1e-5, 1e-4]) # 各更新上の学習率減衰
    }

def get_ImageDataGenerator_parameter_suggestions(trial) -> dict:
    """
    Get parameter sample for ImageDataGenerator (like Keras)
    Args:
        trial(trial.Trial):
    Returns:
        dict: parameter sample generated by trial object
    """
    return {
        'rescale': 1.0/255.0,
        'width_shift_range': trial.suggest_categorical('height_shift_range', [0.0, 0.25]),
        'height_shift_range': trial.suggest_categorical('height_shift_range', [0.0, 0.25]),
        'horizontal_flip': trial.suggest_categorical('horizontal_flip', [True, False]),
        'vertical_flip': trial.suggest_categorical('vertical_flip', [True, False]),
        'shear_range': trial.suggest_categorical('shear_range', [0.0, 20, 50]),
        'zoom_range': trial.suggest_categorical('zoom_range', [0.0, 0.2, 0.5]),
        'rotation_range': trial.suggest_categorical('rotation_range', [0.0, 45, 60, 90]),
        'channel_shift_range': trial.suggest_categorical('channel_shift_range', [0.0, 100, 200]),
        'brightness_range': trial.suggest_categorical('brightness_range', [[1.0, 1.0], [0.3, 1.0]]),
        # MyImageDataGenerator param
        'random_erasing_prob': trial.suggest_categorical('random_erasing_prob', [0.0, 0.5]),
        'random_erasing_maxpixel': 255.,
        'mix_up_alpha': trial.suggest_categorical('mix_up_alpha', [0.0, 0.2]),
        'ricap_beta': trial.suggest_categorical('ricap_beta', [0.0, 0.3]),
        'is_base_aug': trial.suggest_categorical('is_base_aug', [False]),
        'is_grayscale': trial.suggest_categorical('is_grayscale', [False]),
    }

def get_Augmentor_parameter_suggestions(trial) -> dict:
    """
    Get parameter sample for Augmentor
    Args:
        trial(trial.Trial):
    Returns:
        dict: parameter sample generated by trial object
    """
    return {
        'rescale': 1.0/255.0,
        'rotate90': trial.suggest_categorical('rotate90', [0.0, 0.5]),
        'rotate180': trial.suggest_categorical('rotate180', [0.0, 0.5]),
        'rotate270': trial.suggest_categorical('rotate270', [0.0, 0.5]),
        'rotate_prob': trial.suggest_categorical('rotate_prob', [0.0, 0.5]),
        'rotate_max_left': trial.suggest_categorical('rotate_max_left', [20, 60, 90]),
        'rotate_max_right': trial.suggest_categorical('rotate_max_right', [20, 60, 90]),
        'crop_prob': trial.suggest_categorical('crop_prob', [0.0, 0.5]),
        'crop_area': trial.suggest_categorical('crop_area', [0.8, 0.5]),
        'crop_by_size_prob': trial.suggest_categorical('crop_by_size_prob', [0.0, 0.5]),
        'crop_by_width': trial.suggest_categorical('crop_by_width', [224]),
        'crop_by_height': trial.suggest_categorical('crop_by_height', [224]),
        'crop_by_centre': trial.suggest_categorical('crop_by_centre', [True, False]),
        'shear_prob': trial.suggest_categorical('shear_prob', [0.0, 0.5]),
        'shear_magni': trial.suggest_categorical('shear_magni', [20, 50]),
        'skew_prob': trial.suggest_categorical('skew_prob', [0.0, 0.5]),
        'skew_magni': trial.suggest_categorical('skew_magni', [20, 50]),
        'zoom_prob': trial.suggest_categorical('zoom_prob', [0.0, 0.5]),
        'zoom_min': trial.suggest_categorical('zoom_min', [0.2, 0.5, 0.9]),
        'zoom_max': trial.suggest_categorical('zoom_max', [1.2, 1.5, 1.9]),
        'flip_left_right': trial.suggest_categorical('flip_left_right', [0.0, 0.5]),
        'flip_top_bottom': trial.suggest_categorical('flip_top_bottom', [0.0, 0.5]),
        'random_erasing_prob': trial.suggest_categorical('random_erasing_prob', [0.0, 0.5]),
        'random_erasing_area': trial.suggest_categorical('random_erasing_area', [0.3]),
        'random_dist_prob': trial.suggest_categorical('random_dist_prob', [0.0, 0.5]),
        'random_dist_grid_width': trial.suggest_categorical('random_dist_grid_width', [4]),
        'random_dist_grid_height': trial.suggest_categorical('random_dist_grid_height', [4]),
        'random_dist_grid_height': trial.suggest_categorical('random_dist_grid_height', [4]),
        'random_dist_magnitude': trial.suggest_categorical('random_dist_magnitude', [8]),
        'black_and_white': trial.suggest_categorical('black_and_white', [0.0, 0.5]),
        'greyscale': trial.suggest_categorical('greyscale', [0.0, 0.5]),
        'invert': trial.suggest_categorical('invert', [0.0, 0.5])
    }

def train_flow_from_directory(args, my_IDG_options):
    #### data load ####
    d_cls = get_train_valid_test.LabeledDataset([args['img_rows'], args['img_cols'], args['channels']]
                                                , args['batch_size']
                                                , valid_batch_size=args['batch_size'])

    train_samples = len(util.find_img_files(args['train_data_dir']))
    val_samples = len(util.find_img_files(args['validation_data_dir']))

    d_cls.create_my_generator_flow_from_directory(args['train_data_dir']
                                                    , args['classes']
                                                    , valid_data_dir=args['validation_data_dir']
                                                    , color_mode=args['color_mode']
                                                    , class_mode=args['class_mode']
                                                    , my_IDG_options=my_IDG_options)

    #### model ####
    os.makedirs(args['output_dir'], exist_ok=True)
    model, orig_model = define_model.get_fine_tuning_model(args['output_dir'], args['img_rows'], args['img_cols'], args['channels']
                                                            , args['num_classes']
                                                            , args['choice_model'], args['trainable']
                                                            , fcpool=args['fcpool']
                                                            , activation=args['activation'])
    optim = define_model.get_optimizers(choice_optim=args['choice_optim'], lr=args['lr'], decay=args['decay'])
    model.compile(loss=args['loss'], optimizer=optim, metrics=args['metrics'])

    #### train ####
    start_time = time.time()
    hist = model.fit_generator(
        d_cls.train_gen,
        steps_per_epoch = train_samples//args['batch_size'],
        epochs = args['num_epoch'],
        validation_data = d_cls.valid_gen,
        validation_steps = val_samples//args['batch_size'],
        verbose = 2,# 1:ログをプログレスバーで標準出力 2:最低限の情報のみ出す
        callbacks = my_callback.get_base_cb(args['output_dir'], args['num_epoch'], early_stopping=args['num_epoch']//3)
        )
    end_time = time.time()
    print("Elapsed Time : {:.2f}sec".format(end_time - start_time))

    plot_log.plot_results(args['output_dir'], os.path.join(args['output_dir'], 'tsv_logger.tsv'))

    return hist

# 目的関数
def objective(trial):
    trial_class = get_class_fine_tuning_parameter_suggestions(trial)
    imagegen_IDG_options = get_ImageDataGenerator_parameter_suggestions(trial)
    augmentor_IDG_options = get_Augmentor_parameter_suggestions(trial)
    trial_merge = {**trial_class, **imagegen_IDG_options, **augmentor_IDG_options}
    display(trial_merge)

    classifier = lgb.LGBMClassifier(**params, random_state=42)
    classifier.fit(X_train, y_train
                   , eval_set=[(X_test, y_test)], early_stopping_rounds=100, verbose=0)
    return np.linalg.norm(y_train - classifier.predict_proba(X_train)[:, 1], ord=1) # 尤度の最適化

if __name__ == '__main__':
    study = optuna.create_study(direction='minimize') # 最小化
    study.optimize(objective, n_trials=100)
